<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itjm.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.itjm.domain.UserInfo" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="userName" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="phoneNum" property="phoneNum" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="roleId" property="roleId" jdbcType="INTEGER" />
  </resultMap>
    <!--
    <resultMap id="DetailsResultMap" type="com.itjm.domain.UserInfo" extends="BaseResultMap">
        <association property="role" column="roleId" javaType="com.itjm.domain.Role" select="com.itjm.dao.RoleMapper.selectByRoleId">
            <collection property="permissions" ofType="com.itjm.domain.Permissions" column="roleId" select="com.itjm.dao.PermissionsMapper.selectByRoleId">

            </collection>
        </association>
    </resultMap>-->

  <sql id="Base_Column_List" >
    id, userName, password, email, phoneNum, status, roleId
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap"  >
    select
    <include refid="Base_Column_List" />
    from t_user
  </select>
  <select id="selectByUserName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from t_user
    where username = #{userName,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_user
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.itjm.domain.UserInfo" >
    insert into t_user (id, userName, password, 
      email, phoneNum, status, 
      roleId)
    values (#{id,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{phoneNum,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{roleId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.itjm.domain.UserInfo" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        userName,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="phoneNum != null" >
        phoneNum,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="roleId != null" >
        roleId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phoneNum != null" >
        #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.itjm.domain.UserInfo" >
    update t_user
    <set >
      <if test="userName != null" >
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phoneNum != null" >
        phoneNum = #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        roleId = #{roleId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.itjm.domain.UserInfo" >
    update t_user
    set userName = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phoneNum = #{phoneNum,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      roleId = #{roleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateStatusByPrimaryKey" parameterType="com.itjm.domain.UserInfo" >
    update t_user
    set status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="selectOneTree" parameterType="java.lang.String" resultMap="BaseResultMap">
    select * from t_user where t_user.id= #{id,jdbcType=VARCHAR}
  </select>
<!--<select id="selectDetailsByPrimaryKey" parameterType="java.lang.String" resultMap="DetailsResultMap">
    select a.username,b.roleName,d.id,d.permissionName,d.url from t_user as a
    left outer join t_role as b on b.roleId =a.roleId
    left  outer join role_permission as c on c.roleId =b.roleId
    left outer join t_permissions as d on c.permissionId =d.id
    WHERE a.id=#{id,jdbcType=VARCHAR}
</select>-->
</mapper>